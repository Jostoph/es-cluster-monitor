// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: es-monitor-service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ClusterHealthResponse_Status int32

const (
	ClusterHealthResponse_UNKNOWN ClusterHealthResponse_Status = 0
	ClusterHealthResponse_GREEN   ClusterHealthResponse_Status = 1
	ClusterHealthResponse_YELLOW  ClusterHealthResponse_Status = 2
	ClusterHealthResponse_RED     ClusterHealthResponse_Status = 3
)

// Enum value maps for ClusterHealthResponse_Status.
var (
	ClusterHealthResponse_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "GREEN",
		2: "YELLOW",
		3: "RED",
	}
	ClusterHealthResponse_Status_value = map[string]int32{
		"UNKNOWN": 0,
		"GREEN":   1,
		"YELLOW":  2,
		"RED":     3,
	}
)

func (x ClusterHealthResponse_Status) Enum() *ClusterHealthResponse_Status {
	p := new(ClusterHealthResponse_Status)
	*p = x
	return p
}

func (x ClusterHealthResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterHealthResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_es_monitor_service_proto_enumTypes[0].Descriptor()
}

func (ClusterHealthResponse_Status) Type() protoreflect.EnumType {
	return &file_es_monitor_service_proto_enumTypes[0]
}

func (x ClusterHealthResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterHealthResponse_Status.Descriptor instead.
func (ClusterHealthResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_es_monitor_service_proto_rawDescGZIP(), []int{1, 0}
}

// Request: Health of a Cluster
type ClusterHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClusterHealthRequest) Reset() {
	*x = ClusterHealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_es_monitor_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterHealthRequest) ProtoMessage() {}

func (x *ClusterHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_es_monitor_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterHealthRequest.ProtoReflect.Descriptor instead.
func (*ClusterHealthRequest) Descriptor() ([]byte, []int) {
	return file_es_monitor_service_proto_rawDescGZIP(), []int{0}
}

// Response: Health of a Cluster
type ClusterHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName                 string                       `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Status                      ClusterHealthResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=proto.ClusterHealthResponse_Status" json:"status,omitempty"`
	TimedOut                    bool                         `protobuf:"varint,3,opt,name=timed_out,json=timedOut,proto3" json:"timed_out,omitempty"`
	NumberOfNodes               int32                        `protobuf:"varint,4,opt,name=number_of_nodes,json=numberOfNodes,proto3" json:"number_of_nodes,omitempty"`
	NumberOfDataNodes           int32                        `protobuf:"varint,5,opt,name=number_of_data_nodes,json=numberOfDataNodes,proto3" json:"number_of_data_nodes,omitempty"`
	ActivePrimaryShards         int32                        `protobuf:"varint,6,opt,name=active_primary_shards,json=activePrimaryShards,proto3" json:"active_primary_shards,omitempty"`
	ActiveShards                int32                        `protobuf:"varint,7,opt,name=active_shards,json=activeShards,proto3" json:"active_shards,omitempty"`
	RelocatingShards            int32                        `protobuf:"varint,8,opt,name=relocating_shards,json=relocatingShards,proto3" json:"relocating_shards,omitempty"`
	InitializingShards          int32                        `protobuf:"varint,9,opt,name=initializing_shards,json=initializingShards,proto3" json:"initializing_shards,omitempty"`
	UnassignedShards            int32                        `protobuf:"varint,10,opt,name=unassigned_shards,json=unassignedShards,proto3" json:"unassigned_shards,omitempty"`
	DelayedUnassignedShards     int32                        `protobuf:"varint,11,opt,name=delayed_unassigned_shards,json=delayedUnassignedShards,proto3" json:"delayed_unassigned_shards,omitempty"`
	NumberOfPendingTasks        int32                        `protobuf:"varint,12,opt,name=number_of_pending_tasks,json=numberOfPendingTasks,proto3" json:"number_of_pending_tasks,omitempty"`
	NumberOfInFlightFetch       int32                        `protobuf:"varint,13,opt,name=number_of_in_flight_fetch,json=numberOfInFlightFetch,proto3" json:"number_of_in_flight_fetch,omitempty"`
	TaskMaxWaitingInQueueMillis int32                        `protobuf:"varint,14,opt,name=task_max_waiting_in_queue_millis,json=taskMaxWaitingInQueueMillis,proto3" json:"task_max_waiting_in_queue_millis,omitempty"`
	ActiveShardsPercentAsNumber float32                      `protobuf:"fixed32,15,opt,name=active_shards_percent_as_number,json=activeShardsPercentAsNumber,proto3" json:"active_shards_percent_as_number,omitempty"`
	Timestamp                   int64                        `protobuf:"varint,16,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ClusterHealthResponse) Reset() {
	*x = ClusterHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_es_monitor_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterHealthResponse) ProtoMessage() {}

func (x *ClusterHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_es_monitor_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterHealthResponse.ProtoReflect.Descriptor instead.
func (*ClusterHealthResponse) Descriptor() ([]byte, []int) {
	return file_es_monitor_service_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterHealthResponse) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClusterHealthResponse) GetStatus() ClusterHealthResponse_Status {
	if x != nil {
		return x.Status
	}
	return ClusterHealthResponse_UNKNOWN
}

func (x *ClusterHealthResponse) GetTimedOut() bool {
	if x != nil {
		return x.TimedOut
	}
	return false
}

func (x *ClusterHealthResponse) GetNumberOfNodes() int32 {
	if x != nil {
		return x.NumberOfNodes
	}
	return 0
}

func (x *ClusterHealthResponse) GetNumberOfDataNodes() int32 {
	if x != nil {
		return x.NumberOfDataNodes
	}
	return 0
}

func (x *ClusterHealthResponse) GetActivePrimaryShards() int32 {
	if x != nil {
		return x.ActivePrimaryShards
	}
	return 0
}

func (x *ClusterHealthResponse) GetActiveShards() int32 {
	if x != nil {
		return x.ActiveShards
	}
	return 0
}

func (x *ClusterHealthResponse) GetRelocatingShards() int32 {
	if x != nil {
		return x.RelocatingShards
	}
	return 0
}

func (x *ClusterHealthResponse) GetInitializingShards() int32 {
	if x != nil {
		return x.InitializingShards
	}
	return 0
}

func (x *ClusterHealthResponse) GetUnassignedShards() int32 {
	if x != nil {
		return x.UnassignedShards
	}
	return 0
}

func (x *ClusterHealthResponse) GetDelayedUnassignedShards() int32 {
	if x != nil {
		return x.DelayedUnassignedShards
	}
	return 0
}

func (x *ClusterHealthResponse) GetNumberOfPendingTasks() int32 {
	if x != nil {
		return x.NumberOfPendingTasks
	}
	return 0
}

func (x *ClusterHealthResponse) GetNumberOfInFlightFetch() int32 {
	if x != nil {
		return x.NumberOfInFlightFetch
	}
	return 0
}

func (x *ClusterHealthResponse) GetTaskMaxWaitingInQueueMillis() int32 {
	if x != nil {
		return x.TaskMaxWaitingInQueueMillis
	}
	return 0
}

func (x *ClusterHealthResponse) GetActiveShardsPercentAsNumber() float32 {
	if x != nil {
		return x.ActiveShardsPercentAsNumber
	}
	return 0
}

func (x *ClusterHealthResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_es_monitor_service_proto protoreflect.FileDescriptor

var file_es_monitor_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x65, 0x73, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe0, 0x06, 0x0a, 0x15, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72,
	0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x6e, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x17, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x38, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e,
	0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x45, 0x0a, 0x20, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x74, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x78, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x12, 0x44, 0x0a, 0x1f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x41,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x4c, 0x4c, 0x4f,
	0x57, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x03, 0x32, 0x60, 0x0a, 0x0e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e,
	0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2f,
	0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4a, 0x6f, 0x73,
	0x74, 0x6f, 0x70, 0x68, 0x2f, 0x65, 0x73, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_es_monitor_service_proto_rawDescOnce sync.Once
	file_es_monitor_service_proto_rawDescData = file_es_monitor_service_proto_rawDesc
)

func file_es_monitor_service_proto_rawDescGZIP() []byte {
	file_es_monitor_service_proto_rawDescOnce.Do(func() {
		file_es_monitor_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_es_monitor_service_proto_rawDescData)
	})
	return file_es_monitor_service_proto_rawDescData
}

var file_es_monitor_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_es_monitor_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_es_monitor_service_proto_goTypes = []interface{}{
	(ClusterHealthResponse_Status)(0), // 0: proto.ClusterHealthResponse.Status
	(*ClusterHealthRequest)(nil),      // 1: proto.ClusterHealthRequest
	(*ClusterHealthResponse)(nil),     // 2: proto.ClusterHealthResponse
}
var file_es_monitor_service_proto_depIdxs = []int32{
	0, // 0: proto.ClusterHealthResponse.status:type_name -> proto.ClusterHealthResponse.Status
	1, // 1: proto.MonitorService.ReadClusterHealth:input_type -> proto.ClusterHealthRequest
	2, // 2: proto.MonitorService.ReadClusterHealth:output_type -> proto.ClusterHealthResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_es_monitor_service_proto_init() }
func file_es_monitor_service_proto_init() {
	if File_es_monitor_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_es_monitor_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterHealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_es_monitor_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_es_monitor_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_es_monitor_service_proto_goTypes,
		DependencyIndexes: file_es_monitor_service_proto_depIdxs,
		EnumInfos:         file_es_monitor_service_proto_enumTypes,
		MessageInfos:      file_es_monitor_service_proto_msgTypes,
	}.Build()
	File_es_monitor_service_proto = out.File
	file_es_monitor_service_proto_rawDesc = nil
	file_es_monitor_service_proto_goTypes = nil
	file_es_monitor_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MonitorServiceClient is the client API for MonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorServiceClient interface {
	ReadClusterHealth(ctx context.Context, in *ClusterHealthRequest, opts ...grpc.CallOption) (*ClusterHealthResponse, error)
}

type monitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorServiceClient(cc grpc.ClientConnInterface) MonitorServiceClient {
	return &monitorServiceClient{cc}
}

func (c *monitorServiceClient) ReadClusterHealth(ctx context.Context, in *ClusterHealthRequest, opts ...grpc.CallOption) (*ClusterHealthResponse, error) {
	out := new(ClusterHealthResponse)
	err := c.cc.Invoke(ctx, "/proto.MonitorService/ReadClusterHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorServiceServer is the server API for MonitorService service.
type MonitorServiceServer interface {
	ReadClusterHealth(context.Context, *ClusterHealthRequest) (*ClusterHealthResponse, error)
}

// UnimplementedMonitorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMonitorServiceServer struct {
}

func (*UnimplementedMonitorServiceServer) ReadClusterHealth(context.Context, *ClusterHealthRequest) (*ClusterHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadClusterHealth not implemented")
}

func RegisterMonitorServiceServer(s *grpc.Server, srv MonitorServiceServer) {
	s.RegisterService(&_MonitorService_serviceDesc, srv)
}

func _MonitorService_ReadClusterHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServiceServer).ReadClusterHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MonitorService/ReadClusterHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServiceServer).ReadClusterHealth(ctx, req.(*ClusterHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MonitorService",
	HandlerType: (*MonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadClusterHealth",
			Handler:    _MonitorService_ReadClusterHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "es-monitor-service.proto",
}
