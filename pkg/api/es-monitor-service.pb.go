// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: es-monitor-service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GeneralClusterHealthResponse_Status int32

const (
	GeneralClusterHealthResponse_UNKNOWN GeneralClusterHealthResponse_Status = 0
	GeneralClusterHealthResponse_GREEN   GeneralClusterHealthResponse_Status = 1
	GeneralClusterHealthResponse_YELLOW  GeneralClusterHealthResponse_Status = 2
	GeneralClusterHealthResponse_RED     GeneralClusterHealthResponse_Status = 3
)

// Enum value maps for GeneralClusterHealthResponse_Status.
var (
	GeneralClusterHealthResponse_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "GREEN",
		2: "YELLOW",
		3: "RED",
	}
	GeneralClusterHealthResponse_Status_value = map[string]int32{
		"UNKNOWN": 0,
		"GREEN":   1,
		"YELLOW":  2,
		"RED":     3,
	}
)

func (x GeneralClusterHealthResponse_Status) Enum() *GeneralClusterHealthResponse_Status {
	p := new(GeneralClusterHealthResponse_Status)
	*p = x
	return p
}

func (x GeneralClusterHealthResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneralClusterHealthResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_es_monitor_service_proto_enumTypes[0].Descriptor()
}

func (GeneralClusterHealthResponse_Status) Type() protoreflect.EnumType {
	return &file_es_monitor_service_proto_enumTypes[0]
}

func (x GeneralClusterHealthResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeneralClusterHealthResponse_Status.Descriptor instead.
func (GeneralClusterHealthResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_es_monitor_service_proto_rawDescGZIP(), []int{2, 0}
}

// Request: General health of the ES clusters
type HealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_es_monitor_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_es_monitor_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_es_monitor_service_proto_rawDescGZIP(), []int{0}
}

// Response: General health of the ES clusters
type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []*GeneralClusterHealthResponse `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_es_monitor_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_es_monitor_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_es_monitor_service_proto_rawDescGZIP(), []int{1}
}

func (x *HealthResponse) GetClusters() []*GeneralClusterHealthResponse {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// Response: General health of an ES cluster
type GeneralClusterHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unix timestamp
	Epoch int32 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// timestamp digital format (HH:MM:SS)
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// cluster name
	Cluster             string                              `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Status              GeneralClusterHealthResponse_Status `protobuf:"varint,4,opt,name=status,proto3,enum=proto.GeneralClusterHealthResponse_Status" json:"status,omitempty"`
	NodeTotal           int32                               `protobuf:"varint,5,opt,name=nodeTotal,proto3" json:"nodeTotal,omitempty"`
	NodeData            int32                               `protobuf:"varint,6,opt,name=nodeData,proto3" json:"nodeData,omitempty"`
	Shards              int32                               `protobuf:"varint,7,opt,name=shards,proto3" json:"shards,omitempty"`
	Pri                 int32                               `protobuf:"varint,8,opt,name=pri,proto3" json:"pri,omitempty"`
	Relo                int32                               `protobuf:"varint,9,opt,name=relo,proto3" json:"relo,omitempty"`
	Init                int32                               `protobuf:"varint,10,opt,name=init,proto3" json:"init,omitempty"`
	Unassign            int32                               `protobuf:"varint,11,opt,name=unassign,proto3" json:"unassign,omitempty"`
	PendingTasks        int32                               `protobuf:"varint,12,opt,name=pendingTasks,proto3" json:"pendingTasks,omitempty"`
	MaxTaskWaitTime     int32                               `protobuf:"varint,13,opt,name=maxTaskWaitTime,proto3" json:"maxTaskWaitTime,omitempty"`
	ActiveShardsPercent float32                             `protobuf:"fixed32,14,opt,name=activeShardsPercent,proto3" json:"activeShardsPercent,omitempty"`
}

func (x *GeneralClusterHealthResponse) Reset() {
	*x = GeneralClusterHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_es_monitor_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralClusterHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralClusterHealthResponse) ProtoMessage() {}

func (x *GeneralClusterHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_es_monitor_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralClusterHealthResponse.ProtoReflect.Descriptor instead.
func (*GeneralClusterHealthResponse) Descriptor() ([]byte, []int) {
	return file_es_monitor_service_proto_rawDescGZIP(), []int{2}
}

func (x *GeneralClusterHealthResponse) GetEpoch() int32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *GeneralClusterHealthResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *GeneralClusterHealthResponse) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *GeneralClusterHealthResponse) GetStatus() GeneralClusterHealthResponse_Status {
	if x != nil {
		return x.Status
	}
	return GeneralClusterHealthResponse_UNKNOWN
}

func (x *GeneralClusterHealthResponse) GetNodeTotal() int32 {
	if x != nil {
		return x.NodeTotal
	}
	return 0
}

func (x *GeneralClusterHealthResponse) GetNodeData() int32 {
	if x != nil {
		return x.NodeData
	}
	return 0
}

func (x *GeneralClusterHealthResponse) GetShards() int32 {
	if x != nil {
		return x.Shards
	}
	return 0
}

func (x *GeneralClusterHealthResponse) GetPri() int32 {
	if x != nil {
		return x.Pri
	}
	return 0
}

func (x *GeneralClusterHealthResponse) GetRelo() int32 {
	if x != nil {
		return x.Relo
	}
	return 0
}

func (x *GeneralClusterHealthResponse) GetInit() int32 {
	if x != nil {
		return x.Init
	}
	return 0
}

func (x *GeneralClusterHealthResponse) GetUnassign() int32 {
	if x != nil {
		return x.Unassign
	}
	return 0
}

func (x *GeneralClusterHealthResponse) GetPendingTasks() int32 {
	if x != nil {
		return x.PendingTasks
	}
	return 0
}

func (x *GeneralClusterHealthResponse) GetMaxTaskWaitTime() int32 {
	if x != nil {
		return x.MaxTaskWaitTime
	}
	return 0
}

func (x *GeneralClusterHealthResponse) GetActiveShardsPercent() float32 {
	if x != nil {
		return x.ActiveShardsPercent
	}
	return 0
}

var File_es_monitor_service_proto protoreflect.FileDescriptor

var file_es_monitor_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x65, 0x73, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x51, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x8f, 0x04, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x72,
	0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x65, 0x6c, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x65, 0x6c, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x69, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x57,
	0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x22, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x03, 0x32, 0x4b, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x52, 0x65, 0x61,
	0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4a, 0x6f, 0x73, 0x74, 0x6f, 0x70, 0x68, 0x2f, 0x65, 0x73, 0x2d, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_es_monitor_service_proto_rawDescOnce sync.Once
	file_es_monitor_service_proto_rawDescData = file_es_monitor_service_proto_rawDesc
)

func file_es_monitor_service_proto_rawDescGZIP() []byte {
	file_es_monitor_service_proto_rawDescOnce.Do(func() {
		file_es_monitor_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_es_monitor_service_proto_rawDescData)
	})
	return file_es_monitor_service_proto_rawDescData
}

var file_es_monitor_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_es_monitor_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_es_monitor_service_proto_goTypes = []interface{}{
	(GeneralClusterHealthResponse_Status)(0), // 0: proto.GeneralClusterHealthResponse.Status
	(*HealthRequest)(nil),                    // 1: proto.HealthRequest
	(*HealthResponse)(nil),                   // 2: proto.HealthResponse
	(*GeneralClusterHealthResponse)(nil),     // 3: proto.GeneralClusterHealthResponse
}
var file_es_monitor_service_proto_depIdxs = []int32{
	3, // 0: proto.HealthResponse.clusters:type_name -> proto.GeneralClusterHealthResponse
	0, // 1: proto.GeneralClusterHealthResponse.status:type_name -> proto.GeneralClusterHealthResponse.Status
	1, // 2: proto.MonitorService.ReadHealth:input_type -> proto.HealthRequest
	2, // 3: proto.MonitorService.ReadHealth:output_type -> proto.HealthResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_es_monitor_service_proto_init() }
func file_es_monitor_service_proto_init() {
	if File_es_monitor_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_es_monitor_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_es_monitor_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_es_monitor_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralClusterHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_es_monitor_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_es_monitor_service_proto_goTypes,
		DependencyIndexes: file_es_monitor_service_proto_depIdxs,
		EnumInfos:         file_es_monitor_service_proto_enumTypes,
		MessageInfos:      file_es_monitor_service_proto_msgTypes,
	}.Build()
	File_es_monitor_service_proto = out.File
	file_es_monitor_service_proto_rawDesc = nil
	file_es_monitor_service_proto_goTypes = nil
	file_es_monitor_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MonitorServiceClient is the client API for MonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorServiceClient interface {
	ReadHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type monitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorServiceClient(cc grpc.ClientConnInterface) MonitorServiceClient {
	return &monitorServiceClient{cc}
}

func (c *monitorServiceClient) ReadHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/proto.MonitorService/ReadHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorServiceServer is the server API for MonitorService service.
type MonitorServiceServer interface {
	ReadHealth(context.Context, *HealthRequest) (*HealthResponse, error)
}

// UnimplementedMonitorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMonitorServiceServer struct {
}

func (*UnimplementedMonitorServiceServer) ReadHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadHealth not implemented")
}

func RegisterMonitorServiceServer(s *grpc.Server, srv MonitorServiceServer) {
	s.RegisterService(&_MonitorService_serviceDesc, srv)
}

func _MonitorService_ReadHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServiceServer).ReadHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MonitorService/ReadHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServiceServer).ReadHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MonitorService",
	HandlerType: (*MonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadHealth",
			Handler:    _MonitorService_ReadHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "es-monitor-service.proto",
}
